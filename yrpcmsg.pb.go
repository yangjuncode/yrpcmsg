// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: yrpcmsg.proto

/*
	Package yrpcmsg is a generated protocol buffer package.

	It is generated from these files:
		yrpcmsg.proto

	It has these top-level messages:
		Ymsg
		MetaItem
		Meta
		GrpcMeta
		Yempty
		Ynocare
		UnixTime
*/
package yrpcmsg

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// 系统中所有的消息交互底层都以此为包装
type Ymsg struct {
	// 整个rpc msg的长度，不包含此字段
	// 虽然这个长度可以很长，但是为了避免大包阻塞其它操作，通常都要限制长度,采用分包多发机制
	// 当使用基于包的传输通道时(udp/kcp/websocket)，此值可能为0(此时长度为收到的整个包的长度)
	Len uint32 `protobuf:"fixed32,1,opt,name=Len,proto3" json:"Len,omitempty"`
	// rpc command,rpc的命令和option
	// b15-b0(uint16):低16为rpc命令
	// b19-b16:body压缩方式 0:无压缩 1:lz4 2:zlib inflate/deflate
	// b23-b20:optbin压缩方式 0:无压缩 1:lz4 2:zlib inflate/deflate
	// b31-b24: not used
	Cmd uint32 `protobuf:"fixed32,2,opt,name=Cmd,proto3" json:"Cmd,omitempty"`
	// session id，登录后一定会有,用于后台区分不同的用户请求
	Sid []byte `protobuf:"bytes,3,opt,name=Sid,proto3" json:"Sid,omitempty"`
	// rpc call id,给分辨不同的rpc调用使用,调用方增1循环使用
	Cid uint32 `protobuf:"varint,4,opt,name=Cid,proto3" json:"Cid,omitempty"`
	// rpc no,从0开始增1使用,用于区分收到重复的包,特别是udp的情况下
	No uint32 `protobuf:"varint,5,opt,name=No,proto3" json:"No,omitempty"`
	// response code
	Res int32 `protobuf:"zigzag32,9,opt,name=Res,proto3" json:"Res,omitempty"`
	// msg body
	Body []byte `protobuf:"bytes,10,opt,name=Body,proto3" json:"Body,omitempty"`
	// optional str parameter,额外的信息,一般不会有,有些特殊命令里面可能用到
	Optstr string `protobuf:"bytes,11,opt,name=Optstr,proto3" json:"Optstr,omitempty"`
	// optional binary parameter,额外的信息,一般不会有,有些特殊命令里面可能用到
	Optbin []byte `protobuf:"bytes,12,opt,name=Optbin,proto3" json:"Optbin,omitempty"`
	// optional grpc meta
	MetaInfo *Meta `protobuf:"bytes,13,opt,name=MetaInfo" json:"MetaInfo,omitempty"`
}

func (m *Ymsg) Reset()                    { *m = Ymsg{} }
func (m *Ymsg) String() string            { return proto.CompactTextString(m) }
func (*Ymsg) ProtoMessage()               {}
func (*Ymsg) Descriptor() ([]byte, []int) { return fileDescriptorYrpcmsg, []int{0} }

func (m *Ymsg) GetLen() uint32 {
	if m != nil {
		return m.Len
	}
	return 0
}

func (m *Ymsg) GetCmd() uint32 {
	if m != nil {
		return m.Cmd
	}
	return 0
}

func (m *Ymsg) GetSid() []byte {
	if m != nil {
		return m.Sid
	}
	return nil
}

func (m *Ymsg) GetCid() uint32 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *Ymsg) GetNo() uint32 {
	if m != nil {
		return m.No
	}
	return 0
}

func (m *Ymsg) GetRes() int32 {
	if m != nil {
		return m.Res
	}
	return 0
}

func (m *Ymsg) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *Ymsg) GetOptstr() string {
	if m != nil {
		return m.Optstr
	}
	return ""
}

func (m *Ymsg) GetOptbin() []byte {
	if m != nil {
		return m.Optbin
	}
	return nil
}

func (m *Ymsg) GetMetaInfo() *Meta {
	if m != nil {
		return m.MetaInfo
	}
	return nil
}

// grpc meta data item
type MetaItem struct {
	Key  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Vals []string `protobuf:"bytes,2,rep,name=vals" json:"vals,omitempty"`
}

func (m *MetaItem) Reset()                    { *m = MetaItem{} }
func (m *MetaItem) String() string            { return proto.CompactTextString(m) }
func (*MetaItem) ProtoMessage()               {}
func (*MetaItem) Descriptor() ([]byte, []int) { return fileDescriptorYrpcmsg, []int{1} }

func (m *MetaItem) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *MetaItem) GetVals() []string {
	if m != nil {
		return m.Vals
	}
	return nil
}

// grpc meta
type Meta struct {
	Val []*MetaItem `protobuf:"bytes,1,rep,name=val" json:"val,omitempty"`
}

func (m *Meta) Reset()                    { *m = Meta{} }
func (m *Meta) String() string            { return proto.CompactTextString(m) }
func (*Meta) ProtoMessage()               {}
func (*Meta) Descriptor() ([]byte, []int) { return fileDescriptorYrpcmsg, []int{2} }

func (m *Meta) GetVal() []*MetaItem {
	if m != nil {
		return m.Val
	}
	return nil
}

// grpc Header Trailer meta
type GrpcMeta struct {
	Header  *Meta `protobuf:"bytes,1,opt,name=Header" json:"Header,omitempty"`
	Trailer *Meta `protobuf:"bytes,2,opt,name=Trailer" json:"Trailer,omitempty"`
}

func (m *GrpcMeta) Reset()                    { *m = GrpcMeta{} }
func (m *GrpcMeta) String() string            { return proto.CompactTextString(m) }
func (*GrpcMeta) ProtoMessage()               {}
func (*GrpcMeta) Descriptor() ([]byte, []int) { return fileDescriptorYrpcmsg, []int{3} }

func (m *GrpcMeta) GetHeader() *Meta {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GrpcMeta) GetTrailer() *Meta {
	if m != nil {
		return m.Trailer
	}
	return nil
}

type Yempty struct {
}

func (m *Yempty) Reset()                    { *m = Yempty{} }
func (m *Yempty) String() string            { return proto.CompactTextString(m) }
func (*Yempty) ProtoMessage()               {}
func (*Yempty) Descriptor() ([]byte, []int) { return fileDescriptorYrpcmsg, []int{4} }

// A generic nocare message that you can use to info the call is not important
// and no care the result. A typical example is to use it in report log/trace.
// For instance:
//
//     service Log {
//       rpc Log(infos) returns (yrpc.Ynocare);
//     }
//
type Ynocare struct {
}

func (m *Ynocare) Reset()                    { *m = Ynocare{} }
func (m *Ynocare) String() string            { return proto.CompactTextString(m) }
func (*Ynocare) ProtoMessage()               {}
func (*Ynocare) Descriptor() ([]byte, []int) { return fileDescriptorYrpcmsg, []int{5} }

type UnixTime struct {
	// Unix time, the number of miliseconds elapsed since January 1, 1970 UTC
	TimeUnix int64 `protobuf:"zigzag64,1,opt,name=TimeUnix,proto3" json:"TimeUnix,omitempty"`
	// utc time yyyy-MM-dd hh:mm:ss.zzz
	TimeStr string `protobuf:"bytes,2,opt,name=TimeStr,proto3" json:"TimeStr,omitempty"`
}

func (m *UnixTime) Reset()                    { *m = UnixTime{} }
func (m *UnixTime) String() string            { return proto.CompactTextString(m) }
func (*UnixTime) ProtoMessage()               {}
func (*UnixTime) Descriptor() ([]byte, []int) { return fileDescriptorYrpcmsg, []int{6} }

func (m *UnixTime) GetTimeUnix() int64 {
	if m != nil {
		return m.TimeUnix
	}
	return 0
}

func (m *UnixTime) GetTimeStr() string {
	if m != nil {
		return m.TimeStr
	}
	return ""
}

func init() {
	proto.RegisterType((*Ymsg)(nil), "yrpcmsg.Ymsg")
	proto.RegisterType((*MetaItem)(nil), "yrpcmsg.MetaItem")
	proto.RegisterType((*Meta)(nil), "yrpcmsg.Meta")
	proto.RegisterType((*GrpcMeta)(nil), "yrpcmsg.GrpcMeta")
	proto.RegisterType((*Yempty)(nil), "yrpcmsg.Yempty")
	proto.RegisterType((*Ynocare)(nil), "yrpcmsg.Ynocare")
	proto.RegisterType((*UnixTime)(nil), "yrpcmsg.UnixTime")
}
func (m *Ymsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ymsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Len != 0 {
		dAtA[i] = 0xd
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Len))
		i += 4
	}
	if m.Cmd != 0 {
		dAtA[i] = 0x15
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Cmd))
		i += 4
	}
	if len(m.Sid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintYrpcmsg(dAtA, i, uint64(len(m.Sid)))
		i += copy(dAtA[i:], m.Sid)
	}
	if m.Cid != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintYrpcmsg(dAtA, i, uint64(m.Cid))
	}
	if m.No != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintYrpcmsg(dAtA, i, uint64(m.No))
	}
	if m.Res != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintYrpcmsg(dAtA, i, uint64((uint32(m.Res)<<1)^uint32((m.Res>>31))))
	}
	if len(m.Body) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintYrpcmsg(dAtA, i, uint64(len(m.Body)))
		i += copy(dAtA[i:], m.Body)
	}
	if len(m.Optstr) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintYrpcmsg(dAtA, i, uint64(len(m.Optstr)))
		i += copy(dAtA[i:], m.Optstr)
	}
	if len(m.Optbin) > 0 {
		dAtA[i] = 0x62
		i++
		i = encodeVarintYrpcmsg(dAtA, i, uint64(len(m.Optbin)))
		i += copy(dAtA[i:], m.Optbin)
	}
	if m.MetaInfo != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintYrpcmsg(dAtA, i, uint64(m.MetaInfo.Size()))
		n1, err := m.MetaInfo.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *MetaItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MetaItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintYrpcmsg(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Vals) > 0 {
		for _, s := range m.Vals {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *Meta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Meta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Val) > 0 {
		for _, msg := range m.Val {
			dAtA[i] = 0xa
			i++
			i = encodeVarintYrpcmsg(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GrpcMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GrpcMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintYrpcmsg(dAtA, i, uint64(m.Header.Size()))
		n2, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Trailer != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintYrpcmsg(dAtA, i, uint64(m.Trailer.Size()))
		n3, err := m.Trailer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *Yempty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Yempty) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Ynocare) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ynocare) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UnixTime) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnixTime) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TimeUnix != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintYrpcmsg(dAtA, i, uint64((uint64(m.TimeUnix)<<1)^uint64((m.TimeUnix>>63))))
	}
	if len(m.TimeStr) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintYrpcmsg(dAtA, i, uint64(len(m.TimeStr)))
		i += copy(dAtA[i:], m.TimeStr)
	}
	return i, nil
}

func encodeVarintYrpcmsg(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Ymsg) Size() (n int) {
	var l int
	_ = l
	if m.Len != 0 {
		n += 5
	}
	if m.Cmd != 0 {
		n += 5
	}
	l = len(m.Sid)
	if l > 0 {
		n += 1 + l + sovYrpcmsg(uint64(l))
	}
	if m.Cid != 0 {
		n += 1 + sovYrpcmsg(uint64(m.Cid))
	}
	if m.No != 0 {
		n += 1 + sovYrpcmsg(uint64(m.No))
	}
	if m.Res != 0 {
		n += 1 + sozYrpcmsg(uint64(m.Res))
	}
	l = len(m.Body)
	if l > 0 {
		n += 1 + l + sovYrpcmsg(uint64(l))
	}
	l = len(m.Optstr)
	if l > 0 {
		n += 1 + l + sovYrpcmsg(uint64(l))
	}
	l = len(m.Optbin)
	if l > 0 {
		n += 1 + l + sovYrpcmsg(uint64(l))
	}
	if m.MetaInfo != nil {
		l = m.MetaInfo.Size()
		n += 1 + l + sovYrpcmsg(uint64(l))
	}
	return n
}

func (m *MetaItem) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovYrpcmsg(uint64(l))
	}
	if len(m.Vals) > 0 {
		for _, s := range m.Vals {
			l = len(s)
			n += 1 + l + sovYrpcmsg(uint64(l))
		}
	}
	return n
}

func (m *Meta) Size() (n int) {
	var l int
	_ = l
	if len(m.Val) > 0 {
		for _, e := range m.Val {
			l = e.Size()
			n += 1 + l + sovYrpcmsg(uint64(l))
		}
	}
	return n
}

func (m *GrpcMeta) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovYrpcmsg(uint64(l))
	}
	if m.Trailer != nil {
		l = m.Trailer.Size()
		n += 1 + l + sovYrpcmsg(uint64(l))
	}
	return n
}

func (m *Yempty) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *Ynocare) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *UnixTime) Size() (n int) {
	var l int
	_ = l
	if m.TimeUnix != 0 {
		n += 1 + sozYrpcmsg(uint64(m.TimeUnix))
	}
	l = len(m.TimeStr)
	if l > 0 {
		n += 1 + l + sovYrpcmsg(uint64(l))
	}
	return n
}

func sovYrpcmsg(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozYrpcmsg(x uint64) (n int) {
	return sovYrpcmsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Ymsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYrpcmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ymsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ymsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Len", wireType)
			}
			m.Len = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Len = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cmd", wireType)
			}
			m.Cmd = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Cmd = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sid", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYrpcmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthYrpcmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sid = append(m.Sid[:0], dAtA[iNdEx:postIndex]...)
			if m.Sid == nil {
				m.Sid = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYrpcmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field No", wireType)
			}
			m.No = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYrpcmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.No |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Res", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYrpcmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Res = v
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYrpcmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthYrpcmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = append(m.Body[:0], dAtA[iNdEx:postIndex]...)
			if m.Body == nil {
				m.Body = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Optstr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYrpcmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYrpcmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Optstr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Optbin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYrpcmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthYrpcmsg
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Optbin = append(m.Optbin[:0], dAtA[iNdEx:postIndex]...)
			if m.Optbin == nil {
				m.Optbin = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYrpcmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYrpcmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MetaInfo == nil {
				m.MetaInfo = &Meta{}
			}
			if err := m.MetaInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYrpcmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYrpcmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MetaItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYrpcmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MetaItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MetaItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYrpcmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYrpcmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vals", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYrpcmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYrpcmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vals = append(m.Vals, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYrpcmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYrpcmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Meta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYrpcmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Meta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Meta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYrpcmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYrpcmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Val = append(m.Val, &MetaItem{})
			if err := m.Val[len(m.Val)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYrpcmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYrpcmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GrpcMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYrpcmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GrpcMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GrpcMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYrpcmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYrpcmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &Meta{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trailer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYrpcmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthYrpcmsg
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Trailer == nil {
				m.Trailer = &Meta{}
			}
			if err := m.Trailer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYrpcmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYrpcmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Yempty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYrpcmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Yempty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Yempty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipYrpcmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYrpcmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ynocare) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYrpcmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ynocare: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ynocare: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipYrpcmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYrpcmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnixTime) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowYrpcmsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnixTime: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnixTime: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeUnix", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYrpcmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.TimeUnix = int64(v)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowYrpcmsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthYrpcmsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipYrpcmsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthYrpcmsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipYrpcmsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowYrpcmsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowYrpcmsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowYrpcmsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthYrpcmsg
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowYrpcmsg
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipYrpcmsg(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthYrpcmsg = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowYrpcmsg   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("yrpcmsg.proto", fileDescriptorYrpcmsg) }

var fileDescriptorYrpcmsg = []byte{
	// 394 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x52, 0x4d, 0x6e, 0xd4, 0x30,
	0x14, 0xc6, 0x49, 0xc8, 0xcf, 0x9b, 0x06, 0x51, 0x2f, 0x90, 0xc5, 0x22, 0xb2, 0x82, 0x10, 0x46,
	0x48, 0x53, 0x34, 0x5c, 0x00, 0xb5, 0x0b, 0x8a, 0x04, 0x45, 0x72, 0xcb, 0x62, 0xba, 0xcb, 0x24,
	0x26, 0x04, 0xc6, 0x71, 0xe4, 0xb8, 0x15, 0xb9, 0x05, 0xc7, 0x62, 0xc9, 0x0d, 0x40, 0xc3, 0x45,
	0xd0, 0x73, 0x33, 0x95, 0xaa, 0xae, 0xf2, 0xfd, 0xf9, 0xbd, 0xcf, 0x91, 0x21, 0x9f, 0xec, 0x50,
	0xeb, 0xb1, 0x5d, 0x0e, 0xd6, 0x38, 0x43, 0x93, 0x99, 0x96, 0x7f, 0x08, 0x44, 0x6b, 0x3d, 0xb6,
	0xf4, 0x31, 0x84, 0x1f, 0x54, 0xcf, 0x08, 0x27, 0x22, 0x91, 0x08, 0x51, 0x39, 0xd1, 0x0d, 0x0b,
	0x6e, 0x94, 0x13, 0xdd, 0xa0, 0x72, 0xde, 0x35, 0x2c, 0xe4, 0x44, 0x1c, 0x48, 0x84, 0x3e, 0xd3,
	0x35, 0x2c, 0xe2, 0x44, 0xe4, 0x12, 0x21, 0x7d, 0x04, 0xc1, 0x99, 0x61, 0x0f, 0xbd, 0x10, 0x9c,
	0x19, 0x4c, 0x48, 0x35, 0xb2, 0x8c, 0x13, 0x71, 0x28, 0x11, 0x52, 0x0a, 0xd1, 0xb1, 0x69, 0x26,
	0x06, 0x7e, 0x8c, 0xc7, 0xf4, 0x09, 0xc4, 0x9f, 0x06, 0x37, 0x3a, 0xcb, 0x16, 0x9c, 0x88, 0x4c,
	0xce, 0x6c, 0xd6, 0x37, 0x5d, 0xcf, 0x0e, 0x7c, 0x7a, 0x66, 0xf4, 0x25, 0xa4, 0x1f, 0x95, 0xab,
	0xde, 0xf7, 0x5f, 0x0c, 0xcb, 0x39, 0x11, 0x8b, 0x55, 0xbe, 0xdc, 0xdf, 0x10, 0x0d, 0x79, 0x6b,
	0x97, 0xaf, 0xe7, 0xa8, 0x53, 0x1a, 0xcb, 0x7c, 0x57, 0x93, 0xbf, 0x64, 0x26, 0x11, 0x62, 0x99,
	0xeb, 0x6a, 0x3b, 0xb2, 0x80, 0x87, 0x22, 0x93, 0x1e, 0x97, 0xaf, 0x20, 0xc2, 0x13, 0xf4, 0x19,
	0x84, 0xd7, 0xd5, 0x96, 0x11, 0x1e, 0x8a, 0xc5, 0xea, 0xf0, 0xce, 0x7c, 0x9c, 0x26, 0xd1, 0x2d,
	0x2f, 0x21, 0x7d, 0x67, 0x87, 0xda, 0x1f, 0x78, 0x0e, 0xf1, 0xa9, 0xaa, 0x1a, 0x65, 0xfd, 0x86,
	0x7b, 0x9d, 0x66, 0x93, 0xbe, 0x80, 0xe4, 0xc2, 0x56, 0xdd, 0x56, 0x59, 0xff, 0x73, 0xef, 0xe5,
	0xf6, 0x6e, 0x99, 0x42, 0xbc, 0x56, 0x7a, 0x70, 0x53, 0x99, 0x41, 0xb2, 0xee, 0x4d, 0x5d, 0x59,
	0x55, 0xbe, 0x85, 0xf4, 0x73, 0xdf, 0xfd, 0xb8, 0xe8, 0xb4, 0xa2, 0x4f, 0x21, 0xc5, 0x2f, 0x72,
	0xbf, 0x92, 0xca, 0x5b, 0x4e, 0x19, 0x24, 0x88, 0xcf, 0xdd, 0xcd, 0x96, 0x4c, 0xee, 0xe9, 0xf1,
	0xea, 0xd7, 0xae, 0x20, 0xbf, 0x77, 0x05, 0xf9, 0xbb, 0x2b, 0xc8, 0xcf, 0x7f, 0xc5, 0x83, 0xd3,
	0xf0, 0xb2, 0x68, 0x3b, 0xf7, 0xf5, 0x6a, 0xb3, 0xac, 0x8d, 0x3e, 0x9a, 0xaa, 0xbe, 0xfd, 0x76,
	0xd5, 0xd7, 0xa6, 0x51, 0x47, 0x73, 0xb1, 0x4d, 0xec, 0xdf, 0xcd, 0x9b, 0xff, 0x01, 0x00, 0x00,
	0xff, 0xff, 0x25, 0xa2, 0x7e, 0x53, 0x48, 0x02, 0x00, 0x00,
}
